package calculator;

import java.util.HashMap;
import java.util.Map;

public class Calculator {
	// Interface to define a generic operation
    interface OperationStrategy {
        double calculate(double num1, double num2);
    }

    // Map to hold different operations
    private final Map<Operations, OperationStrategy> operationsMap = new HashMap<>();

    // Constructor to initialize basic operations
    public Calculator() {
        operationsMap.put(Operation.ADD, (num1, num2) -> num1 + num2);
        operationsMap.put(Operation.SUBTRACT, (num1, num2) -> num1 - num2);
        operationsMap.put(Operation.MULTIPLY, (num1, num2) -> num1 * num2);
        operationsMap.put(Operation.DIVIDE, (num1, num2) -> {
            if (num2 == 0) {
                throw new ArithmeticException("Cannot divide by zero");
            }
            return num1 / num2;
        });
    }

    // Basic calculation method
    public double calculate(Operation op, double num1, double num2) {
        OperationStrategy operation = operationsMap.get(op);
        if (operation == null) {
            throw new UnsupportedOperationException("Operation not supported");
        }
        return operation.calculate(num1, num2);
    }

    // Extensibility: Method to add new operations
    public void addOperation(Operation op, OperationStrategy strategy) {
        operationsMap.put(op, strategy);
    }
}
